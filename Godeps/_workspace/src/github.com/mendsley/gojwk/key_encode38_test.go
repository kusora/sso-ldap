// Copyright 2014 Matthew Endsley
// All rights reserved
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted providing that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

package gojwk

import (
	//	"bytes"
	//	"crypto"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rsa"
	"math/big"
	"testing"
)

// A.1 - Example public keys
func TestEncodePublicKey(t *testing.T) {
	// ECDSA key
	key, err := PublicKey(&ecdsa.PublicKey{
		Curve: elliptic.P256(),
		X: new(big.Int).SetBytes([]byte{0x30, 0xa0, 0x42, 0x4c, 0xd2,
			0x1c, 0x29, 0x44, 0x83, 0x8a, 0x2d, 0x75, 0xc9, 0x2b, 0x37, 0xe7, 0x6e, 0xa2,
			0xd, 0x9f, 0x0, 0x89, 0x3a, 0x3b, 0x4e, 0xee, 0x8a, 0x3c, 0xa, 0xaf, 0xec, 0x3e}),
		Y: new(big.Int).SetBytes([]byte{0xe0, 0x4b, 0x65, 0xe9, 0x24,
			0x56, 0xd9, 0x88, 0x8b, 0x52, 0xb3, 0x79, 0xbd, 0xfb, 0xd5, 0x1e, 0xe8,
			0x69, 0xef, 0x1f, 0xf, 0xc6, 0x5b, 0x66, 0x59, 0x69, 0x5b, 0x6c, 0xce,
			0x8, 0x17, 0x23}),
	})
	if err != nil {
		t.Fatal("PublicKey: ", err)
	}
	key.Use = "enc"
	key.Kid = "1"

	data, err := Marshal(key)
	if err != nil {
		t.Fatal("Marshal: ", err)
	}

	const jwtEC = `{"kty":"EC","use":"enc","kid":"1","crv":"P-256","x":"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4","y":"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM"}`
	if string(data) != jwtEC {
		t.Fatalf("Unexpected serialization:\n\t%q\n\t%q", string(data), jwtEC)
	}

	// RSA key
	key, err = PublicKey(&rsa.PublicKey{
		N: new(big.Int).SetBytes([]byte{0xd2, 0xfc, 0x7b, 0x6a, 0xa, 0x1e,
			0x6c, 0x67, 0x10, 0x4a, 0xeb, 0x8f, 0x88, 0xb2, 0x57, 0x66, 0x9b, 0x4d, 0xf6,
			0x79, 0xdd, 0xad, 0x9, 0x9b, 0x5c, 0x4a, 0x6c, 0xd9, 0xa8, 0x80, 0x15, 0xb5,
			0xa1, 0x33, 0xbf, 0xb, 0x85, 0x6c, 0x78, 0x71, 0xb6, 0xdf, 0x0, 0xb, 0x55,
			0x4f, 0xce, 0xb3, 0xc2, 0xed, 0x51, 0x2b, 0xb6, 0x8f, 0x14, 0x5c, 0x6e, 0x84,
			0x34, 0x75, 0x2f, 0xab, 0x52, 0xa1, 0xcf, 0xc1, 0x24, 0x40, 0x8f, 0x79, 0xb5,
			0x8a, 0x45, 0x78, 0xc1, 0x64, 0x28, 0x85, 0x57, 0x89, 0xf7, 0xa2, 0x49, 0xe3,
			0x84, 0xcb, 0x2d, 0x9f, 0xae, 0x2d, 0x67, 0xfd, 0x96, 0xfb, 0x92, 0x6c, 0x19,
			0x8e, 0x7, 0x73, 0x99, 0xfd, 0xc8, 0x15, 0xc0, 0xaf, 0x9, 0x7d, 0xde, 0x5a,
			0xad, 0xef, 0xf4, 0x4d, 0xe7, 0xe, 0x82, 0x7f, 0x48, 0x78, 0x43, 0x24, 0x39,
			0xbf, 0xee, 0xb9, 0x60, 0x68, 0xd0, 0x47, 0x4f, 0xc5, 0xd, 0x6d, 0x90, 0xbf,
			0x3a, 0x98, 0xdf, 0xaf, 0x10, 0x40, 0xc8, 0x9c, 0x2, 0xd6, 0x92, 0xab, 0x3b,
			0x3c, 0x28, 0x96, 0x60, 0x9d, 0x86, 0xfd, 0x73, 0xb7, 0x74, 0xce, 0x7, 0x40,
			0x64, 0x7c, 0xee, 0xea, 0xa3, 0x10, 0xbd, 0x12, 0xf9, 0x85, 0xa8, 0xeb, 0x9f,
			0x59, 0xfd, 0xd4, 0x26, 0xce, 0xa5, 0xb2, 0x12, 0xf, 0x4f, 0x2a, 0x34, 0xbc,
			0xab, 0x76, 0x4b, 0x7e, 0x6c, 0x54, 0xd6, 0x84, 0x2, 0x38, 0xbc, 0xc4, 0x5, 0x87,
			0xa5, 0x9e, 0x66, 0xed, 0x1f, 0x33, 0x89, 0x45, 0x77, 0x63, 0x5c, 0x47, 0xa,
			0xf7, 0x5c, 0xf9, 0x2c, 0x20, 0xd1, 0xda, 0x43, 0xe1, 0xbf, 0xc4, 0x19, 0xe2,
			0x22, 0xa6, 0xf0, 0xd0, 0xbb, 0x35, 0x8c, 0x5e, 0x38, 0xf9, 0xcb, 0x5, 0xa, 0xea,
			0xfe, 0x90, 0x48, 0x14, 0xf1, 0xac, 0x1a, 0xa4, 0x9c, 0xca, 0x9e, 0xa0, 0xca, 0x83}),
		E: 0x10001,
	})
	if err != nil {
		t.Fatal("PublicKey: ", err)
	}
	key.Alg = "RS256"
	key.Kid = "2011-04-29"

	data, err = Marshal(key)
	if err != nil {
		t.Fatal("Marshal: ", err)
	}

	const jwtRSA = `{"kty":"RSA","kid":"2011-04-29","alg":"RS256","n":"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw","e":"AQAB"}`
	if string(data) != jwtRSA {
		t.Fatalf("Unexpected serialization:\n\t%q\n\t%q", string(data), jwtRSA)
	}
}

// A.2 - Example private keys
func TestEncodePrivateKey(t *testing.T) {
	// ECDSA key
	key, err := PrivateKey(&ecdsa.PrivateKey{
		PublicKey: ecdsa.PublicKey{
			Curve: elliptic.P256(),
			X: new(big.Int).SetBytes([]byte{0x30, 0xa0, 0x42, 0x4c, 0xd2,
				0x1c, 0x29, 0x44, 0x83, 0x8a, 0x2d, 0x75, 0xc9, 0x2b, 0x37, 0xe7, 0x6e, 0xa2,
				0xd, 0x9f, 0x0, 0x89, 0x3a, 0x3b, 0x4e, 0xee, 0x8a, 0x3c, 0xa, 0xaf, 0xec, 0x3e}),
			Y: new(big.Int).SetBytes([]byte{0xe0, 0x4b, 0x65, 0xe9, 0x24,
				0x56, 0xd9, 0x88, 0x8b, 0x52, 0xb3, 0x79, 0xbd, 0xfb, 0xd5, 0x1e, 0xe8,
				0x69, 0xef, 0x1f, 0xf, 0xc6, 0x5b, 0x66, 0x59, 0x69, 0x5b, 0x6c, 0xce,
				0x8, 0x17, 0x23}),
		},
		D: new(big.Int).SetBytes([]byte{0xf3, 0xbd, 0xc, 0x7, 0xa8,
			0x1f, 0xb9, 0x32, 0x78, 0x1e, 0xd5, 0x27, 0x52, 0xf6, 0xc, 0xc8, 0x9a,
			0x6b, 0xe5, 0xe5, 0x19, 0x34, 0xfe, 0x1, 0x93, 0x8d, 0xdb, 0x55, 0xd8,
			0xf7, 0x78, 0x1}),
	})
	if err != nil {
		t.Fatal("PrivateKey: ", err)
	}
	key.Use = "enc"
	key.Kid = "1"

	data, err := Marshal(key)
	if err != nil {
		t.Fatal("Marshal: ", err)
	}

	const jwtEC = `{"kty":"EC","use":"enc","kid":"1","crv":"P-256","x":"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4","y":"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM","d":"870MB6gfuTJ4HtUnUvYMyJpr5eUZNP4Bk43bVdj3eAE"}`
	if string(data) != jwtEC {
		t.Fatalf("Unexpected representation:\n\t%q\n\t%q", string(data), jwtEC)
	}

	// RSA key
	key, err = PrivateKey(&rsa.PrivateKey{
		PublicKey: rsa.PublicKey{
			N: new(big.Int).SetBytes([]byte{0xd2, 0xfc, 0x7b, 0x6a, 0xa, 0x1e,
				0x6c, 0x67, 0x10, 0x4a, 0xeb, 0x8f, 0x88, 0xb2, 0x57, 0x66, 0x9b, 0x4d, 0xf6,
				0x79, 0xdd, 0xad, 0x9, 0x9b, 0x5c, 0x4a, 0x6c, 0xd9, 0xa8, 0x80, 0x15, 0xb5,
				0xa1, 0x33, 0xbf, 0xb, 0x85, 0x6c, 0x78, 0x71, 0xb6, 0xdf, 0x0, 0xb, 0x55,
				0x4f, 0xce, 0xb3, 0xc2, 0xed, 0x51, 0x2b, 0xb6, 0x8f, 0x14, 0x5c, 0x6e, 0x84,
				0x34, 0x75, 0x2f, 0xab, 0x52, 0xa1, 0xcf, 0xc1, 0x24, 0x40, 0x8f, 0x79, 0xb5,
				0x8a, 0x45, 0x78, 0xc1, 0x64, 0x28, 0x85, 0x57, 0x89, 0xf7, 0xa2, 0x49, 0xe3,
				0x84, 0xcb, 0x2d, 0x9f, 0xae, 0x2d, 0x67, 0xfd, 0x96, 0xfb, 0x92, 0x6c, 0x19,
				0x8e, 0x7, 0x73, 0x99, 0xfd, 0xc8, 0x15, 0xc0, 0xaf, 0x9, 0x7d, 0xde, 0x5a,
				0xad, 0xef, 0xf4, 0x4d, 0xe7, 0xe, 0x82, 0x7f, 0x48, 0x78, 0x43, 0x24, 0x39,
				0xbf, 0xee, 0xb9, 0x60, 0x68, 0xd0, 0x47, 0x4f, 0xc5, 0xd, 0x6d, 0x90, 0xbf,
				0x3a, 0x98, 0xdf, 0xaf, 0x10, 0x40, 0xc8, 0x9c, 0x2, 0xd6, 0x92, 0xab, 0x3b,
				0x3c, 0x28, 0x96, 0x60, 0x9d, 0x86, 0xfd, 0x73, 0xb7, 0x74, 0xce, 0x7, 0x40,
				0x64, 0x7c, 0xee, 0xea, 0xa3, 0x10, 0xbd, 0x12, 0xf9, 0x85, 0xa8, 0xeb, 0x9f,
				0x59, 0xfd, 0xd4, 0x26, 0xce, 0xa5, 0xb2, 0x12, 0xf, 0x4f, 0x2a, 0x34, 0xbc,
				0xab, 0x76, 0x4b, 0x7e, 0x6c, 0x54, 0xd6, 0x84, 0x2, 0x38, 0xbc, 0xc4, 0x5, 0x87,
				0xa5, 0x9e, 0x66, 0xed, 0x1f, 0x33, 0x89, 0x45, 0x77, 0x63, 0x5c, 0x47, 0xa,
				0xf7, 0x5c, 0xf9, 0x2c, 0x20, 0xd1, 0xda, 0x43, 0xe1, 0xbf, 0xc4, 0x19, 0xe2,
				0x22, 0xa6, 0xf0, 0xd0, 0xbb, 0x35, 0x8c, 0x5e, 0x38, 0xf9, 0xcb, 0x5, 0xa, 0xea,
				0xfe, 0x90, 0x48, 0x14, 0xf1, 0xac, 0x1a, 0xa4, 0x9c, 0xca, 0x9e, 0xa0, 0xca, 0x83}),
			E: 0x10001,
		},
		D: new(big.Int).SetBytes([]byte{0x5f, 0x87, 0x13, 0xb5, 0xe2, 0x58,
			0xfe, 0x9, 0xf8, 0x15, 0x83, 0xec, 0x5c, 0x1f, 0x2b, 0x75, 0x78, 0xb1, 0xe6,
			0xfc, 0x2c, 0x83, 0x51, 0x4b, 0x37, 0x91, 0x37, 0x11, 0xa1, 0xba, 0x44, 0x9a,
			0x15, 0x1f, 0xe1, 0xcb, 0x2c, 0xa0, 0xfd, 0x33, 0xb7, 0x71, 0xe6, 0x8a, 0x3b,
			0x19, 0x44, 0x64, 0x9d, 0xc8, 0x67, 0xad, 0x1c, 0x1e, 0x52, 0x40, 0xbb, 0x85,
			0x3e, 0x5f, 0x24, 0xb3, 0x34, 0x59, 0xb1, 0x40, 0x28, 0xd2, 0xd6, 0x63, 0x6b,
			0xef, 0xec, 0x1e, 0x8d, 0xa9, 0x74, 0xb3, 0x52, 0xfc, 0x53, 0xd3, 0xf6, 0x12,
			0x7e, 0xa8, 0xa3, 0xc2, 0x9d, 0xd1, 0x4f, 0x39, 0x41, 0x68, 0x2c, 0x56, 0xa7,
			0x87, 0x68, 0x16, 0x4e, 0x4d, 0xda, 0x8f, 0x6, 0xcb, 0xf9, 0xc7, 0x34, 0xaa,
			0xe8, 0x0, 0x32, 0x24, 0x27, 0x8e, 0xa9, 0x45, 0x4a, 0x21, 0xb1, 0x7c, 0xb0,
			0x6d, 0x17, 0x80, 0x75, 0x86, 0x8c, 0xc0, 0x5b, 0x3d, 0xb6, 0xff, 0x1d, 0xfd,
			0xc3, 0xd5, 0x63, 0x78, 0xb4, 0xed, 0xad, 0xed, 0xf0, 0xc3, 0x7a, 0x4c, 0xdc,
			0x26, 0xd1, 0xd4, 0x9a, 0xc2, 0x6f, 0x6f, 0xe3, 0xb5, 0x22, 0xa, 0x5d, 0xd2,
			0x93, 0x96, 0x62, 0x1b, 0xbc, 0x68, 0x8c, 0xf2, 0xee, 0xe2, 0xc6, 0xe0, 0xd5,
			0x4d, 0xa3, 0xc7, 0x82, 0x1, 0x4c, 0xd0, 0x73, 0x9d, 0xb2, 0x52, 0xcc, 0x51,
			0xca, 0xeb, 0xa8, 0xd3, 0xf1, 0xb8, 0x24, 0xba, 0xab, 0x24, 0xd0, 0x68, 0xec,
			0x90, 0x32, 0x64, 0xd7, 0xd6, 0x78, 0xab, 0x8, 0xf0, 0x6e, 0xc9, 0xe7, 0xe2,
			0x3d, 0x96, 0x6, 0x28, 0xb7, 0x44, 0xbf, 0x94, 0xb3, 0x69, 0x46, 0x56, 0x46,
			0x3c, 0x7e, 0x41, 0x73, 0x99, 0xed, 0x73, 0xd0, 0x76, 0xc8, 0x91, 0xfc, 0xf4,
			0x63, 0xa9, 0xaa, 0x9c, 0xe6, 0x2d, 0xa9, 0xcd, 0x17, 0xe2, 0x37, 0xdc, 0x2a,
			0x80, 0x2, 0xf1}),
	})
	if err != nil {
		t.Fatal("PrivateKey: ", err)
	}
	key.Alg = "RS256"
	key.Kid = "2011-04-29"

	data, err = Marshal(key)
	if err != nil {
		t.Fatal("Marshal: ", err)
	}

	const jwtRSA = `{"kty":"RSA","kid":"2011-04-29","alg":"RS256","d":"X4cTteJY_gn4FYPsXB8rdXix5vwsg1FLN5E3EaG6RJoVH-HLLKD9M7dx5oo7GURknchnrRweUkC7hT5fJLM0WbFAKNLWY2vv7B6NqXSzUvxT0_YSfqijwp3RTzlBaCxWp4doFk5N2o8Gy_nHNKroADIkJ46pRUohsXywbReAdYaMwFs9tv8d_cPVY3i07a3t8MN6TNwm0dSawm9v47UiCl3Sk5ZiG7xojPLu4sbg1U2jx4IBTNBznbJSzFHK66jT8bgkuqsk0GjskDJk19Z4qwjwbsnn4j2WBii3RL-Us2lGVkY8fkFzme1z0HbIkfz0Y6mqnOYtqc0X4jfcKoAC8Q","n":"0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMstn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbISD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqbw0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw","e":"AQAB"}`
	if string(data) != jwtRSA {
		t.Fatalf("Unexpected representation:\n\t%q\n\t%q", string(data), jwtRSA)
	}
}

// A.3 - Example Symmetric Keys
func TestEncodeSymmetricKey(t *testing.T) {
	const jsonKey = `{"keys":
	       [
	         {"kty":"oct",
	          "alg":"A128KW",
	          "k":"GawgguFyGrWKav7AX4VKUg"},

	         {"kty":"oct",
	          "k":"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow",
	          "kid":"HMAC key used in JWS A.1 example"}
	       ]
	     }`

	// decode as public key
	{
		jwt, err := PublicKey([]byte{0x19, 0xac, 0x20, 0x82, 0xe1, 0x72, 0x1a, 0xb5, 0x8a,
			0x6a, 0xfe, 0xc0, 0x5f, 0x85, 0x4a, 0x52})
		if err != nil {
			t.Fatal("PublicKey: ", err)
		}
		jwt.Alg = "A128KW"

		data, err := Marshal(jwt)
		if err != nil {
			t.Fatal("Marshal: ", err)
		}

		const jwt1 = `{"kty":"oct","alg":"A128KW","k":"GawgguFyGrWKav7AX4VKUg"}`
		if string(data) != jwt1 {
			t.Fatalf("Unexpected representation:\n\t%q\n\t%q", string(data), jwt1)
		}

		jwt, err = PublicKey([]byte{0x3, 0x23, 0x35, 0x4b, 0x2b, 0xf, 0xa5, 0xbc, 0x83,
			0x7e, 0x6, 0x65, 0x77, 0x7b, 0xa6, 0x8f, 0x5a, 0xb3, 0x28, 0xe6, 0xf0, 0x54, 0xc9,
			0x28, 0xa9, 0xf, 0x84, 0xb2, 0xd2, 0x50, 0x2e, 0xbf, 0xd3, 0xfb, 0x5a, 0x92, 0xd2,
			0x6, 0x47, 0xef, 0x96, 0x8a, 0xb4, 0xc3, 0x77, 0x62, 0x3d, 0x22, 0x3d, 0x2e, 0x21,
			0x72, 0x5, 0x2e, 0x4f, 0x8, 0xc0, 0xcd, 0x9a, 0xf5, 0x67, 0xd0, 0x80, 0xa3})
		if err != nil {
			t.Fatal("PublicKey: ", err)
		}
		jwt.Kid = "HMAC key used in JWS A.1 example"

		data, err = Marshal(jwt)
		if err != nil {
			t.Fatal("Marshal: ", err)
		}

		const jwt2 = `{"kty":"oct","kid":"HMAC key used in JWS A.1 example","k":"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"}`
		if string(data) != jwt2 {
			t.Fatalf("Unexpected representation:\n\t%q\n\t%q", string(data), jwt2)
		}
	}

	// decode as private key
	{
		jwt, err := PrivateKey([]byte{0x19, 0xac, 0x20, 0x82, 0xe1, 0x72, 0x1a, 0xb5, 0x8a,
			0x6a, 0xfe, 0xc0, 0x5f, 0x85, 0x4a, 0x52})
		if err != nil {
			t.Fatal("PublicKey: ", err)
		}
		jwt.Alg = "A128KW"

		data, err := Marshal(jwt)
		if err != nil {
			t.Fatal("Marshal: ", err)
		}

		const jwt1 = `{"kty":"oct","alg":"A128KW","k":"GawgguFyGrWKav7AX4VKUg"}`
		if string(data) != jwt1 {
			t.Fatalf("Unexpected representation:\n\t%q\n\t%q", string(data), jwt1)
		}

		jwt, err = PrivateKey([]byte{0x3, 0x23, 0x35, 0x4b, 0x2b, 0xf, 0xa5, 0xbc, 0x83,
			0x7e, 0x6, 0x65, 0x77, 0x7b, 0xa6, 0x8f, 0x5a, 0xb3, 0x28, 0xe6, 0xf0, 0x54, 0xc9,
			0x28, 0xa9, 0xf, 0x84, 0xb2, 0xd2, 0x50, 0x2e, 0xbf, 0xd3, 0xfb, 0x5a, 0x92, 0xd2,
			0x6, 0x47, 0xef, 0x96, 0x8a, 0xb4, 0xc3, 0x77, 0x62, 0x3d, 0x22, 0x3d, 0x2e, 0x21,
			0x72, 0x5, 0x2e, 0x4f, 0x8, 0xc0, 0xcd, 0x9a, 0xf5, 0x67, 0xd0, 0x80, 0xa3})
		if err != nil {
			t.Fatal("PublicKey: ", err)
		}
		jwt.Kid = "HMAC key used in JWS A.1 example"

		data, err = Marshal(jwt)
		if err != nil {
			t.Fatal("Marshal: ", err)
		}

		const jwt2 = `{"kty":"oct","kid":"HMAC key used in JWS A.1 example","k":"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"}`
		if string(data) != jwt2 {
			t.Fatalf("Unexpected representation:\n\t%q\n\t%q", string(data), jwt2)
		}
	}
}
